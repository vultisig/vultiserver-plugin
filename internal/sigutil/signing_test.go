package sigutil

import (
	"encoding/hex"
	"fmt"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/stretchr/testify/require"
	"github.com/vultisig/mobile-tss-lib/tss"
	"math/big"
	"testing"
)

func TestSignLegacyTx(t *testing.T) {
	// Setup common test data

	privKey, _ := crypto.GenerateKey()
	addr := crypto.PubkeyToAddress(privKey.PublicKey)
	chainID := big.NewInt(1)

	// Create a sample unsigned transaction
	unsignedTx := types.NewTransaction(
		0,
		common.HexToAddress("0xRecipient"),
		big.NewInt(100),
		21000,
		big.NewInt(1e9),
		[]byte{})

	rawTx, _ := unsignedTx.MarshalBinary()

	signer := types.NewEIP155Signer(chainID)
	txHash := signer.Hash(unsignedTx).Bytes()
	sig, _ := crypto.Sign(txHash, privKey)

	r := new(big.Int).SetBytes(sig[:32])
	s := new(big.Int).SetBytes(sig[32:64])
	recoveryID := sig[64]

	tests := []struct {
		name       string
		keysignR   string
		keysignS   string
		recoveryID string
		rawTx      string
		chainID    *big.Int
		wantErr    bool
		errorMsg   string
		validate   func(t *testing.T, tx *types.Transaction, sender *common.Address)
	}{
		{
			name:       "valid signature",
			keysignR:   fmt.Sprintf("%x", r),
			keysignS:   fmt.Sprintf("%x", s),
			recoveryID: fmt.Sprintf("%d", recoveryID),
			rawTx:      hex.EncodeToString(rawTx),
			chainID:    chainID,
			validate: func(t *testing.T, tx *types.Transaction, sender *common.Address) {
				recoveredSender, err := types.NewEIP155Signer(chainID).Sender(tx)
				require.NoError(t, err)

				require.True(t, unsignedTx.Hash().Hex() != "", "unsigned tx hash is missing")
				require.Equal(t, addr, *sender, "sender address mismatch")
				require.Equal(t, recoveredSender, *sender, "recovered sender address address mismatch")
			},
		},
		{
			name:       "invalid R value",
			keysignR:   "invalid_hex",
			keysignS:   fmt.Sprintf("%x", s),
			recoveryID: fmt.Sprintf("%d", recoveryID),
			rawTx:      hex.EncodeToString(rawTx),
			chainID:    chainID,
			wantErr:    true,
			errorMsg:   "failed to parse R",
		},
		{
			name:       "invalid S value",
			keysignR:   fmt.Sprintf("%x", r),
			keysignS:   "invalid_hex",
			recoveryID: fmt.Sprintf("%d", recoveryID),
			rawTx:      hex.EncodeToString(rawTx),
			chainID:    chainID,
			wantErr:    true,
			errorMsg:   "failed to parse S",
		},
		{
			name:       "invalid recoveryID",
			keysignR:   fmt.Sprintf("%x", r),
			keysignS:   fmt.Sprintf("%x", s),
			recoveryID: "invalid_recovery_id",
			rawTx:      hex.EncodeToString(rawTx),
			chainID:    chainID,
			wantErr:    true,
			errorMsg:   "failed to parse recovery ID",
		},
		{
			name:       "invalid raw transaction",
			keysignR:   fmt.Sprintf("%x", r),
			keysignS:   fmt.Sprintf("%x", s),
			recoveryID: fmt.Sprintf("%d", recoveryID),
			rawTx:      "invalid_hex",
			chainID:    chainID,
			wantErr:    true,
			errorMsg:   "failed to decode raw transaction",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {

			keysignResp := tss.KeysignResponse{
				R:          tt.keysignR,
				S:          tt.keysignS,
				RecoveryID: tt.recoveryID,
			}

			tx, sender, err := SignLegacyTx(keysignResp, tt.rawTx, tt.chainID)
			if tt.wantErr {
				require.Error(t, err)
				require.Contains(t, err.Error(), tt.errorMsg)
				return
			}
			require.NoError(t, err)
			tt.validate(t, tx, sender)
		})
	}
}

func TestVerifySignature(t *testing.T) {
	tests := []struct {
		name                string
		compressedPubkeyHex string
		chainCodeHex        string
		derivePath          string
		msgHex              string
		signatureHex        string
		expectedAddressHex  string
		shouldBeValid       bool
	}{
		{
			name:                "valid signature",
			compressedPubkeyHex: "02e23a52d46f02064f60305a5397ed808f4e2dcc4210a3ddc1c4ca9a6ac6d02fb3",
			chainCodeHex:        "8769353fa9b5baaf9ceef4c0c747c57d67933ed9865612ce5d8b771708bfaa1d",
			derivePath:          "m/44'/60'/0'/0/0",
			msgHex:              "7b226964223a2237666264363730352d303133642d343731392d386538622d323433396466316130353937222c227075626c69635f6b6579223a22222c2269735f6563647361223a747275652c22636861696e5f636f64655f686578223a2238373639333533666139623562616166396365656634633063373437633537643637393333656439383635363132636535643862373731373038626661613164222c226465726976655f70617468223a226d2f3434272f3630272f30272f302f30222c22706c7567696e5f6964223a22646361222c22706c7567696e5f76657273696f6e223a22302e302e31222c22706f6c6963795f76657273696f6e223a22302e302e31222c22706c7567696e5f74797065223a22646361222c227369676e6174757265223a22222c22706f6c696379223a7b22636861696e5f6964223a2231222c227363686564756c65223a7b22696e74657276616c223a223135222c226672657175656e6379223a226d696e7574656c79222c2273746172745f74696d65223a22323032352d30332d31345431333a30333a34302e3438345a227d2c22746f74616c5f616d6f756e74223a2231303030303030303030303030303030303030222c22746f74616c5f6f7264657273223a2231222c22736f757263655f746f6b656e5f6964223a22307863303261616133396232323366653864306130653563346632376561643930383363373536636332222c2264657374696e6174696f6e5f746f6b656e5f6964223a22307861306238363939316336323138623336633164313964346132653965623063653336303665623438227d2c22616374697665223a747275657d",
			signatureHex:        "f65e9ab8ff4eccfce2ffade6c79d46647a51b4526f25f1c6225e43762d30faec49c4447e738dd122d8cbc437584f9177fdf377bfe745544f066e56f6da63b3ee01",
			expectedAddressHex:  "0x7238f7c96DB71bf2bEda4909f023DAE40DEf3248",
			shouldBeValid:       true,
		},
		{
			name:                "tampered message - invalid signature",
			compressedPubkeyHex: "02e23a52d46f02064f60305a5397ed808f4e2dcc4210a3ddc1c4ca9a6ac6d02fb3",
			chainCodeHex:        "8769353fa9b5baaf9ceef4c0c747c57d67933ed9865612ce5d8b771708bfaa1d",
			derivePath:          "m/44'/60'/0'/0/0",
			msgHex:              "7b226964223a2237666264363730352d303133642d343731392d386538622d323433396466316130353937222c227075626c69635f6b6579223a22222c2269735f6563647361223a747275652c22636861696e5f636f64655f686578223a2238373639333533666139623562616166396365656634633063373437633537643637393333656439383635363132636535643862373731373038626661613164222c226465726976655f70617468223a226d2f3434272f3630272f30272f302f30222c22706c7567696e5f6964223a22646361222c22706c7567696e5f76657273696f6e223a22302e302e31222c22706f6c6963795f76657273696f6e223a22302e302e31222c22706c7567696e5f74797065223a22646361222c227369676e6174757265223a22222c22706f6c696379223a7b22636861696e5f6964223a2231222c227363686564756c65223a7b22696e74657276616c223a223135222c226672657175656e6379223a226d696e7574656c79222c2273746172745f74696d65223a22323032352d30332d31345431333a30333a34302e3438345a227d2c22746f74616c5f616d6f756e74223a2231303030303030303030303030303030303030222c22746f74616c5f6f7264657273223a2231222c22736f757263655f746f6b656e5f6964223a22307863303261616133396232323366653864306130653563346632376561643930383363373536636332222c2264657374696e6174696f6e5f746f6b656e5f6964223a22307861306238363939316336323138623336633164313964346132653965623063653336303665623438227d2c22616374697665223a66616c73657d",
			signatureHex:        "f65e9ab8ff4eccfce2ffade6c79d46647a51b4526f25f1c6225e43762d30faec49c4447e738dd122d8cbc437584f9177fdf377bfe745544f066e56f6da63b3ee01",
			expectedAddressHex:  "0x7238f7c96DB71bf2bEda4909f023DAE40DEf3248",
			shouldBeValid:       false,
		},
		{
			name:                "tampered signature - invalid signature",
			compressedPubkeyHex: "02e23a52d46f02064f60305a5397ed808f4e2dcc4210a3ddc1c4ca9a6ac6d02fb3",
			chainCodeHex:        "8769353fa9b5baaf9ceef4c0c747c57d67933ed9865612ce5d8b771708bfaa1d",
			derivePath:          "m/44'/60'/0'/0/0",
			msgHex:              "7b226964223a2237666264363730352d303133642d343731392d386538622d323433396466316130353937222c227075626c69635f6b6579223a22222c2269735f6563647361223a747275652c22636861696e5f636f64655f686578223a2238373639333533666139623562616166396365656634633063373437633537643637393333656439383635363132636535643862373731373038626661613164222c226465726976655f70617468223a226d2f3434272f3630272f30272f302f30222c22706c7567696e5f6964223a22646361222c22706c7567696e5f76657273696f6e223a22302e302e31222c22706f6c6963795f76657273696f6e223a22302e302e31222c22706c7567696e5f74797065223a22646361222c227369676e6174757265223a22222c22706f6c696379223a7b22636861696e5f6964223a2231222c227363686564756c65223a7b22696e74657276616c223a223135222c226672657175656e6379223a226d696e7574656c79222c2273746172745f74696d65223a22323032352d30332d31345431333a30333a34302e3438345a227d2c22746f74616c5f616d6f756e74223a2231303030303030303030303030303030303030222c22746f74616c5f6f7264657273223a2231222c22736f757263655f746f6b656e5f6964223a22307863303261616133396232323366653864306130653563346632376561643930383363373536636332222c2264657374696e6174696f6e5f746f6b656e5f6964223a22307861306238363939316336323138623336633164313964346132653965623063653336303665623438227d2c22616374697665223a747275657d",
			signatureHex:        "a65e9ab8ff4eccfce2ffade6c79d46647a51b4526f25f1c6225e43762d30faec49c4447e738dd122d8cbc437584f9177fdf377bfe745544f066e56f6da63b3ee01",
			expectedAddressHex:  "0x7238f7c96DB71bf2bEda4909f023DAE40DEf3248",
			shouldBeValid:       false,
		},
		{
			name:                "wrong derivation path - invalid signature",
			compressedPubkeyHex: "02e23a52d46f02064f60305a5397ed808f4e2dcc4210a3ddc1c4ca9a6ac6d02fb3",
			chainCodeHex:        "8769353fa9b5baaf9ceef4c0c747c57d67933ed9865612ce5d8b771708bfaa1d",
			derivePath:          "m/44'/60'/0'/0/1",
			msgHex:              "7b226964223a2237666264363730352d303133642d343731392d386538622d323433396466316130353937222c227075626c69635f6b6579223a22222c2269735f6563647361223a747275652c22636861696e5f636f64655f686578223a2238373639333533666139623562616166396365656634633063373437633537643637393333656439383635363132636535643862373731373038626661613164222c226465726976655f70617468223a226d2f3434272f3630272f30272f302f30222c22706c7567696e5f6964223a22646361222c22706c7567696e5f76657273696f6e223a22302e302e31222c22706f6c6963795f76657273696f6e223a22302e302e31222c22706c7567696e5f74797065223a22646361222c227369676e6174757265223a22222c22706f6c696379223a7b22636861696e5f6964223a2231222c227363686564756c65223a7b22696e74657276616c223a223135222c226672657175656e6379223a226d696e7574656c79222c2273746172745f74696d65223a22323032352d30332d31345431333a30333a34302e3438345a227d2c22746f74616c5f616d6f756e74223a2231303030303030303030303030303030303030222c22746f74616c5f6f7264657273223a2231222c22736f757263655f746f6b656e5f6964223a22307863303261616133396232323366653864306130653563346632376561643930383363373536636332222c2264657374696e6174696f6e5f746f6b656e5f6964223a22307861306238363939316336323138623336633164313964346132653965623063653336303665623438227d2c22616374697665223a747275657d",
			signatureHex:        "f65e9ab8ff4eccfce2ffade6c79d46647a51b4526f25f1c6225e43762d30faec49c4447e738dd122d8cbc437584f9177fdf377bfe745544f066e56f6da63b3ee01",
			expectedAddressHex:  "0x0000000000000000000000000000000000000000",
			shouldBeValid:       false,
		},
		{
			name:                "wrong chain code - invalid signature",
			compressedPubkeyHex: "02e23a52d46f02064f60305a5397ed808f4e2dcc4210a3ddc1c4ca9a6ac6d02fb3",
			chainCodeHex:        "8769353fa9b5baaf9ceef4c0c747c57d67933ed9865612ce5d8b771708bfaa1e",
			derivePath:          "m/44'/60'/0'/0/0",
			msgHex:              "7b226964223a2237666264363730352d303133642d343731392d386538622d323433396466316130353937222c227075626c69635f6b6579223a22222c2269735f6563647361223a747275652c22636861696e5f636f64655f686578223a2238373639333533666139623562616166396365656634633063373437633537643637393333656439383635363132636535643862373731373038626661613164222c226465726976655f70617468223a226d2f3434272f3630272f30272f302f30222c22706c7567696e5f6964223a22646361222c22706c7567696e5f76657273696f6e223a22302e302e31222c22706f6c6963795f76657273696f6e223a22302e302e31222c22706c7567696e5f74797065223a22646361222c227369676e6174757265223a22222c22706f6c696379223a7b22636861696e5f6964223a2231222c227363686564756c65223a7b22696e74657276616c223a223135222c226672657175656e6379223a226d696e7574656c79222c2273746172745f74696d65223a22323032352d30332d31345431333a30333a34302e3438345a227d2c22746f74616c5f616d6f756e74223a2231303030303030303030303030303030303030222c22746f74616c5f6f7264657273223a2231222c22736f757263655f746f6b656e5f6964223a22307863303261616133396232323366653864306130653563346632376561643930383363373536636332222c2264657374696e6174696f6e5f746f6b656e5f6964223a22307861306238363939316336323138623336633164313964346132653965623063653336303665623438227d2c22616374697665223a747275657d",
			signatureHex:        "f65e9ab8ff4eccfce2ffade6c79d46647a51b4526f25f1c6225e43762d30faec49c4447e738dd122d8cbc437584f9177fdf377bfe745544f066e56f6da63b3ee01",
			expectedAddressHex:  "0x0000000000000000000000000000000000000000",
			shouldBeValid:       false,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// Decode the message and signature
			msgBytes, err := hex.DecodeString(tt.msgHex)
			require.NoError(t, err)

			sigBytes, err := hex.DecodeString(tt.signatureHex)
			require.NoError(t, err)

			// Remove recovery ID if present (last byte)
			if len(sigBytes) == 65 {
				sigBytes = sigBytes[:64]
			}

			isValid, err := VerifySignature(tt.compressedPubkeyHex, tt.chainCodeHex, tt.derivePath, msgBytes, sigBytes)
			if err != nil {
				fmt.Println(err.Error())
			}
			require.Equal(t, tt.shouldBeValid, isValid, "Signature validation result does not match expected result")
		})
	}
}
